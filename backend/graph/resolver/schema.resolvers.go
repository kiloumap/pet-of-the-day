package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"errors"
	"fmt"
	"golang.org/x/crypto/bcrypt"
	"pet-of-the-day/graph"
	"pet-of-the-day/graph/model"
	"pet-of-the-day/internal/users"
	"time"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.User, error) {
	existingUser, _ := r.UserRepository.GetByEmail(input.Email)
	if existingUser != nil {
		return nil, errors.New("email already in use")
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, errors.New("failed to hash password")
	}

	user := &users.User{
		Name:         input.Name,
		Nickname:     input.Nickname,
		Email:        input.Email,
		PasswordHash: string(hashedPassword),
		BirthDate:    time.Parse("2006-01-02", input.BirthDate),
		City:         &input.City,
		Country:      &input.Country,
		PostalCode:   &input.PostalCode,
		CreatedAt:    time.Now(),
		UpdatedAt:    time.Now(),
	}

	if err := r.UserRepository.Create(user); err != nil {
		return nil, err
	}

	token, err := users.GenerateJWT(user)
	if err != nil {
		return nil, errors.New("failed to generate token")
	}

	return &AuthPayload{
		Token: token,
		User:  user,
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.User, error) {
	// Récupérer l'utilisateur
	user, err := r.UserRepository.GetByEmail(email)
	if err != nil || user == nil {
		return nil, errors.New("invalid email or password")
	}

	// Vérifier le mot de passe
	if err := bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(password)); err != nil {
		return nil, errors.New("invalid email or password")
	}

	// Générer un token JWT
	token, err := users.GenerateJWT(user)
	if err != nil {
		return nil, errors.New("failed to generate token")
	}

	return &AuthPayload{
		Token: token,
		User:  user,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.UserRepository.GetAll(), nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
