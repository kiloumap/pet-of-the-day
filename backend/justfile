# Justfile for Pet of the Day
# Install Just: https://github.com/casey/just

# Variables
compose_file := "docker-compose.yml"

# Colors
yellow := '\033[1;33m'
green := '\033[0;32m'
red := '\033[0;31m'
blue := '\033[0;34m'
nc := '\033[0m'

# Show available commands by default
default:
    @just --list

# Show all available commands
help:
    @echo "{{yellow}}Pet of the Day - Available commands:{{nc}}"
    @echo ""
    @just --list

# Generate Ent code
generate:
    @echo "{{yellow}}Generating Ent code...{{nc}}"
    chmod +x scripts/ent-setup.sh
    ./scripts/ent-setup.sh
    @echo "{{green}}Ent code generated!{{nc}}"

# Initialize Go module and download dependencies
go-init:
    @echo "{{yellow}}Initializing Go module...{{nc}}"
    go mod tidy
    go mod download
    just generate
    @echo "{{green}}Go module initialized!{{nc}}"

# Start all services
start:
    @echo "{{yellow}}Starting services...{{nc}}"
    chmod +x scripts/dev.sh
    ./scripts/dev.sh start

# Stop all services
stop:
    @echo "{{yellow}}Stopping services...{{nc}}"
    ./scripts/dev.sh stop

# Restart all services
restart:
    @echo "{{yellow}}Restarting services...{{nc}}"
    ./scripts/dev.sh restart

# Build Docker images
build:
    @echo "{{yellow}}Building images...{{nc}}"
    ./scripts/dev.sh build

# Clean containers and volumes
clean:
    @echo "{{red}}Cleaning containers and volumes...{{nc}}"
    ./scripts/dev.sh clean

# Run tests for specific bounded context or all
test *args="":
    @echo "{{yellow}}Running tests...{{nc}}"
    @if [ "{{args}}" = "" ]; then \
        echo "Running all tests..."; \
        richgo test ./internal/... -v || go test ./internal/... -v; \
    else \
        echo "Running tests for {{args}} bounded context..."; \
        richgo test ./internal/{{args}}/... -v || go test ./internal/{{args}}/... -v; \
    fi

# Run tests with coverage
test-coverage:
    @echo "{{yellow}}Running tests with coverage...{{nc}}"
    go test -covermode=count -coverprofile=coverage.out ./internal/...
    @echo "üìä Generating HTML coverage report..."
    @go tool cover -html=coverage.out -o coverage.html
    @echo "{{green}}Coverage report generated: coverage.html{{nc}}"
    @echo "üìà Coverage summary:"
    @go tool cover -func=coverage.out | tail -1

# Run unit tests only (domain layer)
test-unit:
    @echo "{{yellow}}Running unit tests (domain layer)...{{nc}}"
    go test ./internal/*/domain -v
    go test ./internal/shared/types -v

# Run integration tests (infrastructure + interfaces)
test-integration:
    @echo "{{yellow}}Running integration tests...{{nc}}"
    go test ./internal/*/infrastructure -v
    go test ./internal/*/interfaces/... -v

# Run application layer tests (commands/queries)
test-application:
    @echo "{{yellow}}Running application layer tests...{{nc}}"
    go test ./internal/*/application/... -v

# Check Ent schema status
ent-status:
    @echo "{{yellow}}Checking Ent schema...{{nc}}"
    @echo "Available schemas:"
    @ls -la ./ent/schema/
    @echo ""
    @echo "Ent code compilation:"
    @go build ./ent/... && echo "{{green}}‚úÖ Ent code compiles successfully{{nc}}" || echo "{{red}}‚ùå Ent compilation failed{{nc}}"

# Apply Ent schema changes
ent-migrate:
    @echo "{{yellow}}Applying Ent schema changes...{{nc}}"
    just generate
    @echo "{{green}}Ent migrations applied!{{nc}}"

# Insert test data
seed:
    @echo "{{yellow}}Inserting test data...{{nc}}"
    ./scripts/dev.sh seed

# Show logs for all services
logs:
    ./scripts/dev.sh logs

# Show logs for specific service
logs-service service:
    ./scripts/dev.sh logs {{service}}

# Open shell in API container
shell:
    @echo "{{yellow}}Opening API shell...{{nc}}"
    ./scripts/dev.sh shell

# Open PostgreSQL shell
db:
    @echo "{{yellow}}Opening PostgreSQL shell...{{nc}}"
    ./scripts/dev.sh db

# Show service status
status:
    ./scripts/dev.sh status

# Start complete development environment
dev:
    @echo "{{yellow}}Starting development environment...{{nc}}"
    just build
    just start
    @echo "{{green}}Environment ready!{{nc}}"
    @echo "{{green}}API: http://localhost:8080{{nc}}"
    @echo "{{green}}Adminer: http://localhost:8081{{nc}}"

# Install development tools
install-tools:
    @echo "{{yellow}}Installing development tools...{{nc}}"
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    go install github.com/air-verse/air@latest
    go install entgo.io/ent/cmd/ent@latest
    go install github.com/kyoh86/richgo@latest
    go install golang.org/x/tools/cmd/goimports@latest
    go install golang.org/x/vuln/cmd/govulncheck@latest
    @echo "{{green}}Tools installed!{{nc}}"

# Run linter
lint:
    @echo "{{yellow}}Running linter...{{nc}}"
    golangci-lint run

# Format code
fmt:
    @echo "{{yellow}}Formatting code...{{nc}}"
    go fmt ./...
    goimports -w . || echo "goimports not installed, run: just install-tools"

# Run benchmarks
bench:
    @echo "{{yellow}}Running benchmarks...{{nc}}"
    go test -bench=. ./internal/...

# Generate Go documentation
docs:
    @echo "{{yellow}}Starting documentation server...{{nc}}"
    @echo "{{green}}Documentation will be available at http://localhost:6060{{nc}}"
    godoc -http=:6060

# Check dependencies
deps-check:
    @echo "{{yellow}}Checking dependencies...{{nc}}"
    go mod verify
    go mod tidy

# Update dependencies
deps-update:
    @echo "{{yellow}}Updating dependencies...{{nc}}"
    go get -u ./...
    go mod tidy

# Security vulnerability scan
security-scan:
    @echo "{{yellow}}Running security scan...{{nc}}"
    govulncheck ./... || echo "{{red}}Security scan failed. Install with: just install-tools{{nc}}"

# Start with hot reload (requires air)
dev-watch:
    @echo "{{yellow}}Starting with hot reload...{{nc}}"
    @if ! command -v air &> /dev/null; then \
        echo "{{red}}Air not installed. Run: just install-tools{{nc}}"; \
        exit 1; \
    fi
    air

# Build for production
prod-build:
    @echo "{{yellow}}Building for production...{{nc}}"
    docker build -t pet-of-the-day:latest .

# Export database
db-export:
    @echo "{{yellow}}Exporting database...{{nc}}"
    docker-compose exec db pg_dump -U postgres pet_of_the_day > backup.sql
    @echo "{{green}}Database exported to backup.sql{{nc}}"

# Import database
db-import file:
    @echo "{{yellow}}Importing {{file}}...{{nc}}"
    docker-compose exec -T db psql -U postgres pet_of_the_day < {{file}}
    @echo "{{green}}Import completed{{nc}}"

# Reset database completely (for Ent)
db-reset:
    @echo "{{red}}‚ö†Ô∏è  Completely resetting database...{{nc}}"
    ./scripts/dev.sh stop
    docker-compose down -v
    just start
    just seed

# Check all dependencies are installed
check-deps:
    #!/usr/bin/env bash
    echo -e "{{yellow}}Checking dependencies...{{nc}}"

    # Check Docker
    if ! command -v docker &> /dev/null; then
        echo -e "{{red}}‚ùå Docker not found{{nc}}"
        exit 1
    else
        echo -e "{{green}}‚úÖ Docker $(docker --version){{nc}}"
    fi

    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo -e "{{red}}‚ùå Docker Compose not found{{nc}}"
        exit 1
    else
        echo -e "{{green}}‚úÖ Docker Compose available{{nc}}"
    fi

    # Check Go
    if ! command -v go &> /dev/null; then
        echo -e "{{yellow}}‚ö†Ô∏è  Go not found (optional for Docker){{nc}}"
    else
        echo -e "{{green}}‚úÖ Go $(go version){{nc}}"
    fi

    # Check Just
    echo -e "{{green}}‚úÖ Just $(just --version){{nc}}"

    echo -e "{{green}}All main dependencies are installed!{{nc}}"

# Clean Go build files
clean-go:
    @echo "{{yellow}}Cleaning Go files...{{nc}}"
    go clean -cache
    go clean -modcache
    go clean -testcache

# Run architectural tests (validate DDD patterns)
test-architecture:
    #!/usr/bin/env bash
    echo -e "{{yellow}}Running architectural tests...{{nc}}"
    echo "Checking bounded context isolation..."

    # Check user context isolation (only domain/application cross-context)
    if go list -f '{{{{.ImportPath}}}}: {{{{join .Imports " "}}}}' ./internal/user/... | grep -E "internal/(pet|community|scoring)/(domain|application)"; then
        echo -e "{{red}}‚ùå User context has forbidden dependencies{{nc}}"
        exit 1
    else
        echo -e "{{green}}‚úÖ User context is properly isolated{{nc}}"
    fi

    # Check pet context isolation (only domain/application cross-context)
    if go list -f '{{{{.ImportPath}}}}: {{{{join .Imports " "}}}}' ./internal/pet/... | grep -E "internal/(user|community|scoring)/(domain|application)"; then
        echo -e "{{red}}‚ùå Pet context has forbidden dependencies{{nc}}"
        exit 1
    else
        echo -e "{{green}}‚úÖ Pet context is properly isolated{{nc}}"
    fi

    echo -e "{{green}}‚úÖ Architectural tests completed{{nc}}"

# Show project information
info:
    @echo "{{blue}}=== Pet of the Day - Project Information ==={{nc}}"
    @echo ""
    @echo "{{yellow}}Architecture:{{nc}}"
    @echo "  ‚Ä¢ Domain-Driven Design (DDD)"
    @echo "  ‚Ä¢ Clean Architecture"
    @echo "  ‚Ä¢ CQRS with Commands/Queries"
    @echo "  ‚Ä¢ Repository Pattern with Mocks"
    @echo "  ‚Ä¢ Ent ORM (schema-first, type-safe)"
    @echo ""
    @echo "{{yellow}}Bounded Contexts:{{nc}}"
    @echo "  ‚Ä¢ User (authentication, user management)"
    @echo "  ‚Ä¢ Pet (pets, owner/co-owner relationships)"
    @echo "  ‚Ä¢ Community (groups) - Coming soon"
    @echo "  ‚Ä¢ Scoring (daily scores, Pet of the Day) - Coming soon"
    @echo ""
    @echo "{{yellow}}Services:{{nc}}"
    @echo "  ‚Ä¢ API: http://localhost:8080"
    @echo "  ‚Ä¢ Adminer: http://localhost:8081"
    @echo "  ‚Ä¢ PostgreSQL: localhost:5432"
    @echo ""
    @echo "{{yellow}}Main commands:{{nc}}"
    @echo "  ‚Ä¢ just dev              - Start complete environment"
    @echo "  ‚Ä¢ just test             - Run all tests"
    @echo "  ‚Ä¢ just test user        - Run user context tests"
    @echo "  ‚Ä¢ just test pet         - Run pet context tests"
    @echo "  ‚Ä¢ just test-coverage    - Run tests with coverage"
    @echo "  ‚Ä¢ just ent-status       - Check Ent schema"
    @echo "  ‚Ä¢ just logs             - Show logs"
    @echo "  ‚Ä¢ just shell            - API shell"
    @echo "  ‚Ä¢ just db              - PostgreSQL shell"
    @echo ""
    @echo "{{yellow}}Documentation:{{nc}}"
    @echo "  ‚Ä¢ README.md - Complete guide"
    @echo "  ‚Ä¢ just help - Command list"

# Initial project setup
setup:
    @echo "{{yellow}}Initial project setup...{{nc}}"
    just check-deps
    chmod +x scripts/*.sh
    just go-init
    just build
    just start
    just seed
    @echo "{{green}}Setup completed! Use 'just start' to begin.{{nc}}"

# Complete project diagnostic
diagnose:
    @echo "{{blue}}=== Pet of the Day Diagnostic ==={{nc}}"
    @echo ""
    just check-deps
    @echo ""
    @echo "{{yellow}}Service Status:{{nc}}"
    just status
    @echo ""
    @echo "{{yellow}}Ent Schema Status:{{nc}}"
    just ent-status
    @echo ""
    @echo "{{yellow}}Recent API logs:{{nc}}"
    docker-compose logs --tail=10 api || echo "API not started"
    @echo ""
    @echo "{{yellow}}Recent DB logs:{{nc}}"
    docker-compose logs --tail=10 db || echo "DB not started"
    @echo ""
    @echo "{{yellow}}Test Status:{{nc}}"
    just test-unit || echo "Some unit tests are failing"

# Validate coding standards
validate:
    @echo "{{yellow}}Validating coding standards...{{nc}}"
    just fmt
    just lint
    just test-architecture
    just security-scan
    @echo "{{green}}Validation completed!{{nc}}"